{
    "name": "Neo4jSinkConnector",
    "config": {
        "topics": "update_agent_output",
        "key.converter": "org.apache.kafka.connect.storage.StringConverter",
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter.schemas.enable": false,
        "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "errors.deadletterqueue.topic.name": "kafka_connect_update_agent_output_error",
        "errors.deadletterqueue.topic.replication.factor": "1",
        "neo4j.server.uri": "neo4j://db:7687",
        "neo4j.authentication.basic.username": "",
        "neo4j.authentication.basic.password": "",
        "neo4j.encryption.enabled": false,
        "neo4j.topic.cypher.update_agent_output": "MATCH (agent:Agent {jid: event.properties.jid, simulation_id: event.properties.simulation_id}) OPTIONAL MATCH (agent)-[relationship]->() SET agent = event.properties DELETE relationship WITH DISTINCT agent, event UNWIND event.connections as connection_list WITH agent, connection_list.name AS connection_list_name, connection_list.to as connection_list_to, event UNWIND connection_list_to as to MATCH (to_agent:Agent {jid: to, simulation_id: event.properties.simulation_id}) CALL apoc.create.relationship(agent, connection_list_name, {r_type: 'connection'}, to_agent) YIELD rel WITH DISTINCT agent, event UNWIND event.messages as message_list WITH agent, message_list.name AS message_list_name, message_list.messages as message_list_messages, event UNWIND message_list_messages as message MATCH (to_agent:Agent {jid: message.sender, simulation_id: event.properties.simulation_id}) CALL apoc.create.relationship(agent, message_list_name, message, to_agent) YIELD rel RETURN NULL"
    }
}
